@let($$props = Object.assign($context, $props))
@let(borderClass = $$props.blend ? 'border-0' : 'border-2')
@let(classes = [
  'block w-full focus:outline-none sm:text-sm rounded-md placeholder-slate-400 bg-transparent',
  borderClass,
  $$props.class || '',
  $$props?.error || flashMessages.get(`errors.${name}`)
    ? 'border-red-300 text-red-600 placeholder-red-300 focus:ring-red-500 focus:border-red-500'
    : 'focus:ring-brand-500 focus:border-brand-500 border-slate-300'
])
@let(name = $$props?.name)
@let(internalValue = flashMessages.get(name) || ($$props.value ?? ''))

<input 
  x-data="{{ js.stringify({ name, internalValue }) }}"

  @if ($$props?.model)
    x-modelable="internalValue"
    x-model="{{ $$props?.model }}"
  @else
    x-model="internalValue"
  @endif

  @if (name)
    name="{{ name }}"
  @endif

  class="{{ html.classNames(classes) }}"

  {{ $props.except(['value', 'name', 'model', 'upSubmit', 'class']).merge({ type: 'text', ...$context }).toAttrs() }} 
/>
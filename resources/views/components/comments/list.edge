@let(canComment = typeof $props.canComment == 'boolean' ? $props.canComment : true)
@let(nodeComments = $props.nodeComments || [])

<ol class="pl-8 list-none">
  @each(comment in nodeComments)
    @let(childComments = comments.filter(c => c.replyTo === comment.id))
    @let(rootParentId = comment.replyTo ? $props.rootParentId : comment.id)
    @let(replyTo = comment.id)
    @let(levelIndex = $props.levelIndex ? $props.levelIndex + 1 : 1)
    @let(isAnon = !comment.userId)
    @let(userLiked = comment.userVotes.find(v => v.meta.pivot_user_id === auth.user?.id))

    <li class="relative" id="comment{{ comment.id }}">
      <div class="bg-slate-100 rounded-md p-2 lg:p-4 mb-6 group relative"
        :class="window.location.hash == `#comment{{ comment.id }}` ? 'border border-brand-600' : ''">
        <div class="mb-4 flex items-center">
          @if (isAnon)
            <div class="w-14 h-14 rounded-xl mr-3 bg-slate-200 overflow-hidden relative">
              @svg('ph:user-fill', { class: 'w-14 h-14 absolute -bottom-1 text-slate-400' })
            </div>
            <div class="flex flex-col">
              <h6 class="text-base font-semibold">
                Anonymous <span class="text-sm font-normal">({{ comment.name }})</span>
              </h6>
              <div class="text-slate-400 text-xs">
                Commented <span datetime="{{ comment.createdAt }}">{{ comment.timeago }}</span>
              </div>
            </div>
          @else
            @profile.link({ user: comment.user, class: 'h-14' })
              <img src="{{ assetDomain }}{{ comment.user.avatar }}" class="w-14 h-14 rounded-xl mr-3" />
            @end
            <div class="flex flex-col">
              <h6 class="text-base font-semibold">
                @profile.link({ user: comment.user })
                  {{ comment.user.username }}
                @end
              </h6>
              <div class="flex items-center gap-6 text-xs h-2.5">
                @if (!comment.user.isFreeTier)
                  <img class="logo-white h-2.5 relative" src="/imgs/adocasts-plus-white-40.png" alt="Adocasts+" />
                  <img class="logo-black h-2.5 relative" src="/imgs/adocasts-plus-black-40.png" alt="Adocasts+" />
                @endif
              </div>
              @if (lessonRequest && lessonRequest.approveCommentId === comment.id)
                <div class="text-green-500 text-xs">
                  <span class="tracking-wider uppercase">Request approved </span>
                  <span class="text-slate-600">
                    <span datetime="{{ comment.createdAt }}">{{ comment.timeago }}</span> with the following comment
                  </span>
                </div>
              @elseif (lessonRequest && lessonRequest.rejectCommentId === comment.id)
                <div class="text-red-500 text-xs">
                  <span class="tracking-wider uppercase">Request closed</span>
                  <span class="text-slate-600">
                    <span datetime="{{ comment.createdAt }}">{{ comment.timeago }}</span> with the following comment
                  </span>
                </div>
              @elseif (lessonRequest && lessonRequest.completeCommentId === comment.id)
                <div class="text-green-500 text-xs">
                  <span class="tracking-wider uppercase">Request completed </span>
                  <span class="text-slate-600">
                    <span datetime="{{ comment.createdAt }}">{{ comment.timeago }}</span> with the following comment
                  </span>
                </div>
              @else
                <div class="text-slate-600 text-xs">
                  Commented <span datetime="{{ comment.createdAt }}">{{ comment.timeago }}</span>
                </div>
              @endif
            </div>
          @endif
        </div>

        <div>
          <div x-show="editId !== {{ comment.id }}" class="prose !max-w-full text-slate-800">{{{ await parser.highlight(comment.body) }}}</div>

          @can('CommentPolicy.update', comment)
            <div x-show="editId === {{ comment.id }}">
              @!comments.form({
                ...comment.serialize(),
                cancelable: true,
                onCancel: 'cancel()'
              })
            </div>
          @endcan

          <div x-show="editId !== {{ comment.id }}" class="flex items-center space-x-2 mt-6 group">
            @if (auth.user && comment.stateId !== States.ARCHIVED)
              @form({ action: form.patch('comments.like', { id: comment.id }), upSubmit: true })
                <button 
                  type="submit" 
                  class="btn-hover-fill text-slate-600 hover:text-slate-950 transition flex items-center text-sm bg-slate-200 rounded-md py-1 px-2" 
                  :class="{ 'bg-brand-100': {{ !!userLiked }} }"
                  @click="$el.classList.toggle('active'); $el.querySelector('.btn-count').textContent = '⌁'">
                  <div x-data="{ liked: {{ !!userLiked }} }" class="w-5 h-5 mr-1.5 relative">
                    @svg('ph:heart-fill', { class: 'w-5 h-5 text-brand-600', 'x-show': js.stringify(userLiked) })
                    @svg('ph:heart-bold', { class: 'w-5 h-5', 'x-show': js.stringify(!userLiked) })
                  </div>
                  <span class="btn-count">{{ comment.userVotes.length }}</span>
                </button>
              @end
            @elseif (comment.stateId !== States.ARCHIVED)
              <div class="btn-hover-fill text-slate-900 transition flex items-center text-sm bg-slate-200 opacity-50 rounded-lg py-1 px-3">
                <div class="w-5 h-5 mr-1.5 relative text-slate-600 dark:text-slate-400">
                  @svg('ph:heartbeat-fill', { class: 'btn-filled w-5 h-5 text-slate-600' })
                </div>
                <span class="btn-count">{{ comment.userVotes.length }}</span>
              </div>
            @endif

            @can('CommentPolicy.reply', comment)
              @if (canComment)
                @button({ '@click': `create(${comment.id})`, size: 'sm', class: 'gap-1.5 opacity-0 group-hover:opacity-100' })
                  @svg('ph:chat-circle-text-fill')
                  Reply
                @end
              @endif
            @endcan

            @if (!auth.user && canComment)
              <p class="opacity-0 group-hover:opacity-100 text-sm duration-150 ml-6">
                Please
                <a href="{{ route('auth.signin.create') }}" up-layer="new modal" up-size="grow" class="anchor link-alt">
                  sign in
                </a>
                or 
                <a href="{{ route('auth.signup.create') }}" up-layer="new modal" up-size="grow" class="anchor link-alt">
                  sign up for free
                </a>
                to reply
              </p>
            @endif

            @can('CommentPolicy.update', comment)
              @button({ '@click': `edit(${comment.id})`, variant: 'blue', size: 'sm', class: 'gap-1.5 opacity-0 group-hover:opacity-100' })
                @svg('ph:note-pencil-fill')
                Edit
              @end
            @endcan

            @can('CommentPolicy.delete', comment)
              @form({ action: form.delete('comments.destroy', { id: comment.id }), upSubmit: true, 'up-confirm': 'Your comment will be deleted, would you like to continue?' })
                @button({ type: 'submit', variant: 'red', size: 'sm', class: 'gap-1.5 opacity-0 group-hover:opacity-100' })
                  @svg('ph:trash-fill')
                  Delete
                @end
              @end
            @endcan
          </div>
        </div>
      </div>

      @can('CommentPolicy.reply', comment)
        {{-- reply to form --}}
        <div x-show="createId === {{ comment.id }}" class="bg-slate-100 border border-slate-200 p-3 rounded-xl ml-8 mb-3">
          @!comments.form({
            postId,
            lessonRequestId,
            rootParentId,
            replyTo,
            levelIndex,
            cancelable: true,
            onCancel: 'cancel()'
          })
        </div>
      @endcan

      @if (childComments.length)
        @!comments.list({
          postId,
          lessonRequestId,
          rootParentId,
          comments,
          levelIndex,
          nodeComments: childComments,
        })
      @endif
    </li>
  @endeach
</ol>
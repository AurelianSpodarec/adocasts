@let(displayCount = 5)
@let(displaySplit = Math.floor((displayCount - 1) / 2))
@let(rangeStart = items.lastPage <= displayCount ? items.firstPage : items.currentPage - displaySplit)
@let(rangeEnd = items.lastPage <= displayCount ? items.lastPage : items.currentPage + displaySplit)
@let(spreadStart = false)
@let(spreadEnd = false)
@let(hasPrevious = items.currentPage > items.firstPage)
@let(hasNext = items.lastPage > items.currentPage)
@let(filterQs = '')
@let(anchorAttrs = $props.anchorAttrs || {})

@if (withQs)
  @let(qs = request.qs())
  @assign(filterQs = Object.keys(qs).filter(key => key !== 'page').map(key => `${key}=${qs[key]}`).join('&'))

  @if (filterQs)
    @assign(filterQs = '&' + filterQs)
  @endif
@endif

@if (rangeStart < items.firstPage)
  @let(diff = items.firstPage - rangeStart)
  @assign(rangeEnd = rangeEnd + diff)
  @assign(rangeStart = items.firstPage)
@endif

@if (rangeEnd > items.lastPage)
  @let(diff = rangeEnd - items.lastPage)
  @assign(rangeStart = rangeStart - diff >= items.firstPage ? rangeStart - diff : items.firstPage)
  @assign(rangeEnd = items.lastPage)
@endif

@if (rangeStart - 1 > items.firstPage)
  @assign(spreadStart = true)
@endif

@if (rangeEnd + 1 < items.lastPage)
  @assign(spreadEnd = true)
@endif

@let(rangeUrls = items.lastPage <= displayCount 
  ? items.getUrlsForRange(items.firstPage, items.lastPage) 
  : [
    ...(rangeStart > items.firstPage ? items.getUrlsForRange(items.firstPage, items.firstPage) : []),
    { spread: spreadStart },
    ...items.getUrlsForRange(rangeStart, rangeEnd),
    { spread: spreadEnd },
    ...(rangeEnd < items.lastPage ? items.getUrlsForRange(items.lastPage, items.lastPage) : [])
  ]
)

<div class="flex items-center justify-between w-full h-16 px-1 md:px-2 border-t border-slate-200">
  <p class="pl-2 text-xs md:text-sm text-slate-700">
    Showing 
    <span class="font-medium">{{ items.currentPage * items.perPage - (items.perPage - 1) }}</span> 
    to 
    <span class="font-medium">{{ items.currentPage === items.lastPage ? items.total : items.currentPage * items.perPage }}</span> 
    of 
    <span class="font-medium">{{ items.total.toLocaleString() }}</span> 
    results
  </p>

  <nav>
      <ul class="flex items-center text-sm leading-tight bg-slate-100 border border-slate-200/70 rounded h-[34px] text-slate-600">
          <li class="h-full">
              <a
                @if (hasPrevious)
                  href="{{ items.url + `?page=${items.currentPage - 1}${filterQs}` }}"
                @endif
                up-follow 
                {{ html.attrs(anchorAttrs) }}
                class="{{ html.classNames(['relative inline-flex items-center h-full px-3 rounded-l', {
                'hover:bg-slate-200 hover:text-slate-900': hasPrevious,
                'cursor-not-allowed text-slate-300': !hasPrevious
              }]) }}">
                  <span>Previous</span>
              </a>
          </li>

          @each (item in rangeUrls)
            <li class="hidden h-full md:block">
                @if (item.spread)
                  <div class="relative inline-flex items-center h-full px-2.5 bg-slate-100 group">
                    <span>...</span>
                  </div>
                @elseif (typeof item.spread === 'undefined')
                  <a
                    up-follow 
                    href="{{ item.url }}{{ filterQs }}" 
                    {{ html.attrs(anchorAttrs) }}
                    class="{{ html.classNames(['relative inline-flex items-center h-full px-3', {
                      'hover:bg-slate-200 hover:text-slate-900': !item.isActive,
                      'text-brand-100 bg-brand-600': item.isActive
                    }]) }}">
                      <span>{{ item.page }}</span>
                  </a>
                @endif
            </li>
          @endeach
          
          <li class="h-full">
            <a
                @if (hasNext)
                  href="{{ items.url + `?page=${items.currentPage + 1}${filterQs}` }}"
                @endif
                up-follow 
                {{ html.attrs(anchorAttrs) }}
                class="{{ html.classNames(['relative inline-flex items-center h-full px-3 rounded-l', {
                'hover:bg-slate-200 hover:text-slate-900': hasNext,
                'cursor-not-allowed text-slate-300': !hasNext
              }]) }}">
                <span>Next</span>
              </a>
          </li>
      </ul>
  </nav>
</div>

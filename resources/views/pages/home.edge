@layout()

  <section class="container-2xl section-y mx-auto relative z-[2]">
{{-- @!hero.getShipDone() --}}

    <div class="container mx-auto h-[calc(100%-125px)] flex flex-col justify-center relative z-20">
      <h2
        class="text-4xl sm:text-5xl md:text-7xl lg:text-8xl 2xl:text-9xl font-black mb-3 sm:mb-4 uppercase drop-shadow-lg">
        <span class="inline-block bg-primary bg-gradient-to-b from-white via-white/75 to-base-content/50 bg-clip-text text-transparent">
          Get
        </span>
        <span class="inline-block bg-primary bg-gradient-to-b from-white via-white/75 to-base-content/50 bg-clip-text text-transparent">
          Ship
        </span>
        <span class="inline-block bg-primary bg-gradient-to-b from-white via-white/75 to-base-content/50 bg-clip-text text-transparent">
          Done
        </span>
      </h2>

      <h1 class="md:text-lg lg:text-2xl 3xl:text-3xl mb-8 lg:mb-12 2xl:mb-16 drop-shadow-sm max-w-[42ch]">
        Adocasts teaches you how to ship NodeJS apps in no time using AdonisJS and it's built-in batteries.
      </h1>

      <div class="flex flex-wrap items-center gap-y-1.5 gap-x-3 md:gap-x-6">
        <a href="/series/lets-learn-adonisjs-6" class="btn btn-accent btn-soft md:btn-wide">
          Ship Your First App
          @svg('solar:map-arrow-right-bold-duotone')
        </a>

        <a href="/signup" class="btn btn-soft md:btn-wide">
          Get Started for Free
        </a>
      </div>

      <div class="absolute right-16 top-1/2 -translate-y-1/2 prose scale-75 origin-right w-1/2 !max-w-full">
        @let(code = `
@inject()
export default class HomeController {
  constructor(protected postService: PostService) {}

  async handle({ view, auth }: HttpContext) {
    if (auth.user) {
      const inProgress = await auth.user.related('progressions')
        .query()
        .apply((scope) => scope.latestSeries({ limit: 6 }))

      view.share({ inProgress })
    }

    return view.render('pages/home', {
      topics: await Topics.query().orderBy('name'),
      series: await Series.query().orderBy('updatedAt', 'desc').limit(5),
      lessons: await this.postService.getLatestLessons({ limit: 12 }),
    })
  }
}
        `.trim())
        {{{ await parser.highlight(`<pre><code class="language-typescript">${code}</code></pre>`) }}}
      </div>
    </div>
  </section>

  <section class="mb-12 pb-8 pt-24 -mt-8 bg-gradient-to-b from-base-100/50 to-base-100/10 border-b border-base-100/50 relative z-[1]">
    <div class="container mx-auto flex flex-col">
      @if (auth.user)
        <h3 class="heading-3">
          Here's What You've Been Up To!
        </h3>

        @!stat.user({ stats })
      @else
        <h3 class="heading-3">
          We'll Be Here When You're Ready!
        </h3>

        @!stat.adocasts({ stats })
      @endif
    </div>
  </section>

  <section class="section-container mx-auto relative z-[1]">
    <h2 class="heading-2">
      Learn one step at a time
    </h2>

    <div class="series-bento">
      @let([firstSeries, ...otherSeries] = series)

      <div class="area-1">
        @!series.card({ series: firstSeries, showLessons: true })
      </div>

      <div class="area-2">
        @each ((item, index) in otherSeries)
          @!series.card({ series: item })
        @endeach
      </div>
    </div>
  </section>

  <section class="section-y relative z-[1]">
    @let(featTopic1 = topics.find(topic => topic.name === 'AdonisJS'))
    @let(featTopic2 = topics.find(topic => topic.name === 'EdgeJS'))
    @let(featTopic3 = topics.find(topic => topic.name === 'Lucid'))
    @let(featTopic4 = topics.find(topic => topic.name === 'Authentication'))
    @let(featIds = [featTopic1.id, featTopic2.id, featTopic3.id, featTopic4.id])
    @let(otherTopics = topics.filter(topic => !featIds.includes(topic.id)))

    <div class="container mx-auto">
      <h2 class="heading-2">
        Dive into a topic
      </h2>

      <div class="grid grid-cols-2 md:grid-cols-4 gap-3 mb-3">
        @!topic.card({ topic: featTopic1, size: 'lg' })
        @!topic.card({ topic: featTopic2, size: 'lg' })
        @!topic.card({ topic: featTopic3, size: 'lg' })
        @!topic.card({ topic: featTopic4, size: 'lg' })
      </div>

      <div class="grid sm:grid-cols-3 md:grid-cols-5 lg:grid-cols-6 gap-3">
        @each (topic in otherTopics)
          @!topic.card({ topic, size: 'sm' })
        @endeach
      </div>
    </div>
  </section>

  <section class="section-y relative z-[1]">
    <div class="container mx-auto">
      <h2 class="heading-2">
        Jump straight to the latest
      </h2>

      @let([featuredLesson1, featuredLesson2, ...otherLessons] = lessons)
      <div class="w-full grid grid-cols-2 gap-3 mb-3">
        @!lesson.card({ lesson: featuredLesson1, size: 'lg' })
        @!lesson.card({ lesson: featuredLesson2, size: 'lg' })
      </div>

      <div class="grid sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3">
        @each (lesson in otherLessons)
          @!lesson.card({ lesson })
        @endeach
      </div>
    </div>
  </section>

  <section class="pt-24 mx-auto relative z-[1]">
    @!pricing.hero()
  </section>

@end
